// SPDX-FileCopyrightText: Copyright 2024 shadPS4 Emulator Project
// SPDX-License-Identifier: GPL-2.0-or-later

// Generated By moduleGenerator
#include "common/logging/log.h"
#include "core/libraries/error_codes.h"
#include "core/libraries/libs.h"
//#include <boost/fiber/all.hpp>
#include "libscefiber.h"

namespace Libraries::Fiber{

int PS4_SYSV_ABI _sceFiberAttachContextAndRun()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI _sceFiberAttachContextAndSwitch()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI _sceFiberGetThreadFramePointerAddress()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI _sceFiberInitializeImpl()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI _sceFiberInitializeWithInternalOptionImpl()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberFinalize()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberGetInfo()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberGetSelf()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberOptParamInitialize()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberRename()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberReturnToThread()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberRun()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberStartContextSizeCheck()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberStopContextSizeCheck()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

int PS4_SYSV_ABI sceFiberSwitch()
{
	LOG_ERROR(Lib_Fiber, "(STUBBED) called");
	return ORBIS_OK;
}

void RegisterlibSceFiber(Core::Loader::SymbolsResolver * sym) {
 LIB_FUNCTION("avfGJ94g36Q", "libSceFiber" , 1 , "libSceFiber", 1, 1 , _sceFiberAttachContextAndRun );
 LIB_FUNCTION("ZqhZFuzKT6U", "libSceFiber" , 1 , "libSceFiber", 1, 1 , _sceFiberAttachContextAndSwitch );
 LIB_FUNCTION("0dy4JtMUcMQ", "libSceFiber" , 1 , "libSceFiber", 1, 1 , _sceFiberGetThreadFramePointerAddress );
 LIB_FUNCTION("hVYD7Ou2pCQ", "libSceFiber" , 1 , "libSceFiber", 1, 1 , _sceFiberInitializeImpl );
 LIB_FUNCTION("7+OJIpko9RY", "libSceFiber" , 1 , "libSceFiber", 1, 1 , _sceFiberInitializeWithInternalOptionImpl );
 LIB_FUNCTION("JeNX5F-NzQU", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberFinalize );
 LIB_FUNCTION("uq2Y5BFz0PE", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberGetInfo );
 LIB_FUNCTION("p+zLIOg27zU", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberGetSelf );
 LIB_FUNCTION("asjUJJ+aa8s", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberOptParamInitialize );
 LIB_FUNCTION("JzyT91ucGDc", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberRename );
 LIB_FUNCTION("B0ZX2hx9DMw", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberReturnToThread );
 LIB_FUNCTION("a0LLrZWac0M", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberRun );
 LIB_FUNCTION("Lcqty+QNWFc", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberStartContextSizeCheck );
 LIB_FUNCTION("Kj4nXMpnM8Y", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberStopContextSizeCheck );
 LIB_FUNCTION("PFT2S-tJ7Uk", "libSceFiber" , 1 , "libSceFiber", 1, 1 , sceFiberSwitch );
};

}